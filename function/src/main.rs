fn main() {
    let n = 10;
    println!("{} {}", add_one(n), n); // 11 10 (前者は参照ではなくコピー渡しのため
    println!("{}", kansuu_hontai());
    println!("{}", five());
}

// 定義 main より下でも OK
// snake_case で書く
// 仮引数の型注釈は必須　値：型
// -> 型　で戻り値を示す
fn add_one(n: i32) -> i32 {
    n + 1
    // 式終わりで値を戻す（詳細下記
}


// 関数本体は、文と式によって構成される。
// また rust においては、関数の最後が文なのか、式なのかが重要な差異になる
fn kansuu_hontai() -> i32 {

    // 文 => 何かの動作をし、値を返さない。文には式も含まれる
    let n = 6;
    // let n = (let n2 = 6); これはエラー、何故なら右辺==文は値を返さない

    // 式 => 何かに評価されるもの、評価された結果を返す
    let n2 = {
        let n3 = 3;
        n3 + 1 // セミコロンついてない！ => 式になり、値を返す。 n2 = n3+1
    } // {} で囲われたものは式である（あと新しいスコープ作れる）。関数の{}も式
    ; // 最後に ; をつけることにより let n2 = {xxxx}; というひと纏まりの 文 になる

    n + n2
    // セミコロンなし => 式で終わるため、この結果を戻り値とする
    // 関数の最後が 文 で終わるなら値を返さない関数となる
    // 早期終了・結果分岐などない限りは return は基本つかわない
}

// つまりこれで関数が成りたっている
fn five() -> i32 {
    5
}
