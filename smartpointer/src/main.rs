// スマートポインタ１

// いろいろある「ポインタ」のうちの(一番ベタな)ひとつが「参照」
// 参照は特に追加効果はないけど、スマートポインタはいろいろある
// Deref と Drop トレイトを実装している

// Box<T>
//
// 参照はコンパイラ時にサイズがはっきりするのでコンパイラできる
// コンパイラ時にサイズのはっきりしない参照はコンパイルできない
// 例えば、ある型の一部にそれと同じ型を含むもの(再帰的)である
//
// 各列挙子のなかで一番大きい値を見つけてコンパイル時に確保する
enum Message {
    Quit,
    Move(i32, i32, i32),
}
// でも再帰的な型はコンパイル時に必要領域がわからない
/* enum List {
    Cons(i32, List),
    Nil,
}*/
// これをスマートポインタ Box<T> で包むことによってコンパイル時には
// Box<T> のポインタ分のメモリ確保でOKとはっきりわかる
enum List {
    Cons(i32, Box<List>),
    Nil,
}

use List::{Cons, Nil};

fn main() {
    let list = Cons(1, // こうなる。Box::new(List)
        Box::new(Cons(2
            , Box::new(Cons(3,
                Box::new(Nil))))));
}


// Deref トレイト
//
//
