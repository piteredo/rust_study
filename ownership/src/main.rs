fn main() {

    // スタックとヒープ

    // スタックは、コンパイル時に内容が全て出揃ってバイナリ化される
    // 整数・小数・論理値・(単)文字型 は全てコンパイル時に素性が明かされてスタックに入る
    // スタックは順番に並んでいて速い

    // ヒープは、実行時に初めてできる処理のためのメモリを実行時にOSから確保する
    // キーボード入力だったり、サイズ不明変数などがそう。
    // 隙間を縫って？飛ばし飛ばしに確保するからアクセス遅め
    // ！使用が終わったらメモリ解放が必要（言語により手動・自動の差あり。rust は自動

    // rust のメモリ解放は、その(ヒープ対象の)変数がスコープを抜けたら自動的に消える
    // 変数にはただ１つの所有者がいて、参照渡し・コピーされたら所有権も渡され(複製されない)=>ムーブ、元の変数は所有者なしになる
    // 所有者なき変数はスコープを抜けようがメモリの破棄は行わず、渡された所有者の変数が抜けたときにただ１度破棄される
    // ！所有者なき変数はその後使えなくなる
    // 所有者ありのヒープの解放時に drop() が呼ばれる


    // 文字列リテラル と String 型は違う

    // 文字型リテラルは直書きされた文字列。実行時の可変不可・そしてスタック行き
    let mut str1 = "hello";
    println!("{}", str1);
    str1 = "bye"; // コンパイル時に判明する変更はOK
    println!("{}", str1);

    // String型 は実行時変更可。コンパイル時にサイズ不明でもOK。ヒープ領域行き。
    let mut str2 = String::from("hello"); // ここでヒープにメモリ要求
    str2.push_str(" again");
    println!("{}", str2);
    // ここでスコープ抜けメモリは解放される


    let _x = 5;
    let _y = _x; // これは複製されるだけなので問題なし
    let str3 = String::from("hello3");
    let str4 = str3; // ムーブ。(シャローコピーとは言わない) 所有者は st4 に移り、！str3は使えなくなる
    // 文字にアクセスするポインタの使用重複を避けれる
    // println!("{}", str3); これはコンパイルエラー。
    // スコープ終了で str3, 4 解放。str4 は drop() を呼ぶ。 str3 は所有者ないので特になし

    let _str4_2 = str4.clone(); // ディープコピーしたい場合はこれ。ヒープ増量で完コピ


    let str5 = String::from("hello5");
    let str6 = func(str5); // コピー。所有権は送り先関数にムーブする。str5 の所有者な無く使えなくなる
    // println!("{}", str5); これは所有者なきあとになるのでコンパイルエラー
    println!("{}", str6);
    // 解放。str6 のみ drop() あり


    //----------------------------------------------


    // 引数にだす度に所有権が移り、戻り値で戻したり面倒。そこで
    // 参照渡し　で所有権は移さずに引数にだせる。変数のポインタ送り。
    let mut str7 = String::from("hello7");
    func2(&str7); // ポインタ送るので所有権は str7 に残る
    func3(&mut str7); // &mut で可変のポインタ送れる
    println!("{}", str7); // hello_func7

    // ただし 可変の参照は１スコープ１つまで（func3 に送った &mut str7 はスコープ抜けてるのでカウント外
    let str8 = &mut str7;
    // let str9 = &mut str7; これはコンパイルエラー。ただ、両方使用しないとエラー出ない
    // println!("{} {}", str8, str9);


    //----------------------------------------------

    // スコープ内で 不変な参照をしている間は、可変の参照はできない
    let str9 = String::from("hello9");
    let str10 = &str9;
    let str11 = &str9;
    // let str12 = &mut str9; コンパイルエラー
}

fn func(str5: String) -> String {
    // str5 の所有権こちらにくる
    str5
    // 所有権を元関数に再びムーブ。drop() は無し
}

fn func2(_str7: &String) {
    // 参照受け取りを　借用　という
    // デフォルトでは不変である
    // str7.push_str("dddd"); これはコンパイルエラー（たとえ送り元の定義が let mut でも
}

fn func3(str7: &mut String) {
    str7.push_str("_func3");
}
